// HEADERS

type AuthOptional = {
  Authorization?: string
}

type AuthRequired = {
  Authorization: string
}

// USERS ENDPOINTS

// Endpoint to register users.
//
// Restrictions:
// - anyone can register a new user who is @client or @realtor
// - only admins can register a new user who is @admin
@headers(AuthOptional)
endpoint registerUser: POST /users/register RegisterUserRequest -> RegisterUserResponse

type RegisterUserRequest = {
  email: string
  password: string
  name: string
  role: Role
}

type RegisterUserResponse = {
  status: @success | @error
  message: string
}

// Endpoint to verify an email address.
endpoint verifyEmailAddress: POST /users/verify VerifyEmailRequest -> VerifyEmailResponse

type VerifyEmailRequest = {
  token: string
}

type VerifyEmailResponse = LoginUserResponse

// Endpoint to login users.
//
// Used by clients, realtors and admins.
endpoint loginUser: POST /users/login LoginUserRequest -> LoginUserResponse

type LoginUserRequest = {
  email: string
  password: string
}

type LoginUserResponse = {
  status: @error
  message: string
} | {
  status: @success
  authToken: string
  userId: string
  role: Role
}

// Endpoint to verify current authentication status.
//
// Used by clients, realtors and admins.
@headers(AuthRequired)
endpoint checkAuth: POST /users/auth void -> LoginUserResponse

// Endpoint to update users.
//
// Restrictions:
// - clients and realtors can only update their own information
// - admins can update any user
@headers(AuthRequired)
endpoint updateUser: PUT /users/:id UpdateUserRequest -> UpdateUserResponse

type UpdateUserRequest = {
  email?: string
  name?: string
  // Current password must be set for updating the current user.
  currentPassword?: string
  newPassword?: string
}

type UpdateUserResponse = {
  status: @success | @error
  message: string
}

// Endpoint to delete users.
//
// Restrictions:
// - clients and realtors can only delete their own account
// - admins can delete any user
@headers(AuthRequired)
endpoint deleteUser: DELETE /users/:id DeleteUserRequest -> DeleteUserResponse

type DeleteUserRequest = {
  // Password must be set for clients and realtors.
  password?: string
}

type DeleteUserResponse = {
  status: @success | @error
  message: string
}

// Endpoint to list users.
//
// Restrictions:
// - only admins can list users
@headers(AuthRequired)
endpoint listUsers: POST /users/list ListUsersRequest -> ListUsersResponse

type ListUsersRequest = {
  filter?: ListUsersFilter
  maxPerPage?: int
  page?: int
}

type ListUsersFilter = {
  role?: Role
  name?: string
}

type ListUsersResponse = {
  results: UserDetails[]
  totalResults: int
  pageCount: int
}

// Endpoint to get a specific users.
//
// Restrictions:
// - only admins can get users
@headers(AuthRequired)
endpoint getUser: GET /users/:id void -> UserDetails

type UserDetails = {
  userId: string
  email: string
  name: string
  role: Role
}

type Role = @client | @realtor | @admin



// APARTMENT ENDPOINTS

// Endpoint to create apartments.
//
// Restrictions:
// - clients cannot create an apartment
// - only admins can set a realtor ID
@headers(AuthRequired)
endpoint createApartment: POST /apartments/create CreateApartmentRequest -> CreateApartmentResponse

type CreateApartmentRequest = {
  info: ApartmentInfo
  realtorId?: string
}

type CreateApartmentResponse = {
  status: @error
  message: string
} | {
  status: @success
  message: string
  apartmentId: string
}

// Endpoint to update apartments.
//
// Restrictions:
// - clients cannot update an apartment
// - realtors can only update the apartments they manage
// - only admins can reassign realtors to appartments
@headers(AuthRequired)
endpoint updateApartment: PUT /apartments/:id UpdateApartmentRequest -> UpdateApartmentResponse

type UpdateApartmentRequest = {
  info: ApartmentInfo
  realtorId?: string
}

type UpdateApartmentResponse = {
  status: @success | @error
  message: string
}

// Endpoint to delete apartments.
//
// Restrictions:
// - clients cannot delete an apartment
// - realtors can only delete the apartments they manage
@headers(AuthRequired)
endpoint deleteApartment: DELETE /apartments/:id void -> DeleteApartmentResponse

type DeleteApartmentResponse = {
  status: @success | @error
  message: string
}

// Endpoint to list apartments.
//
// Everyone can set the same filters, but the set of apartments that will be filtered is different:
// - clients will see rentable apartments from any realtor (rented=true will always return an
//   empty list)
// - realtors will see rentable and rented apartments they manage
// - admins will see all apartments
@headers(AuthRequired)
endpoint listApartments: POST /apartments/list ListApartmentsRequest -> ListApartmentsResponse

type ListApartmentsRequest = {
  filter?: ListApartmentsFilter
  maxPerPage?: int
  page?: int
}

type ListApartmentsFilter = {
  realtorId?: string
  rented?: bool
  sizeRange?: {
    min: int
    max: int
  }
  priceRange?: {
    min: int
    max: int
  }
  numberOfRooms?: {
    min: int
    max: int
  }
  viewport?: Viewport
}

type ListApartmentsResponse = {
  results: ApartmentDetails[]
  totalResults: int
  pageCount: int
}

// Endpoint to get a specific apartment.
//
// Non-rentable apartments are only visible to their realtors and admins.
@headers(AuthRequired)
endpoint getApartment: GET /apartments/:id void -> ApartmentDetails

type ApartmentDetails = {
  apartmentId: string;
  info: ApartmentInfo
  realtor: Realtor
  dateAdded: Date
}

type ApartmentInfo = {
  // Floor area in square meters.
  floorArea: float

  // Price per month in USD.
  pricePerMonth: int

  // Number of rooms.
  numberOfRooms: int

  // Geographical coordinates.
  coordinates: Coordinates

  rented: bool
}

type Viewport = {
  southWest: Coordinates
  northEast: Coordinates
}

type Coordinates = {
  latitude: float
  longitude: float
}

// Seconds since epoch.
type Date = long

type Realtor = {
  realtorId: string
  name: string
}
